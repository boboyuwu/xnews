package com.boboyuwu.xnews.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.boboyuwu.xnews.greendao.data.HeadLineNewsData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEAD_LINE_NEWS_DATA".
*/
public class HeadLineNewsDataDao extends AbstractDao<HeadLineNewsData, Long> {

    public static final String TABLENAME = "HEAD_LINE_NEWS_DATA";

    /**
     * Properties of entity HeadLineNewsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChannelId = new Property(1, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property DataJson = new Property(2, String.class, "dataJson", false, "DATA_JSON");
    };


    public HeadLineNewsDataDao(DaoConfig config) {
        super(config);
    }
    
    public HeadLineNewsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEAD_LINE_NEWS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHANNEL_ID\" TEXT," + // 1: channelId
                "\"DATA_JSON\" TEXT);"); // 2: dataJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEAD_LINE_NEWS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HeadLineNewsData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(2, channelId);
        }
 
        String dataJson = entity.getDataJson();
        if (dataJson != null) {
            stmt.bindString(3, dataJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HeadLineNewsData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(2, channelId);
        }
 
        String dataJson = entity.getDataJson();
        if (dataJson != null) {
            stmt.bindString(3, dataJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HeadLineNewsData readEntity(Cursor cursor, int offset) {
        HeadLineNewsData entity = new HeadLineNewsData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // channelId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // dataJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HeadLineNewsData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannelId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDataJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HeadLineNewsData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HeadLineNewsData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
